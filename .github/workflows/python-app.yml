# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]

    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        pip install flake8 pytest
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
  lint: 
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]

    defaults:
      run:
        working-directory: ./example-app
    concurrency:
      group: conc1
    steps:
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
    - uses: actions/checkout@v3
    - name: Install Flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  formatter:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]

    defaults:
      run:
        working-directory: ./example-app
    concurrency:
      group: conc2
    steps:
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        pip install black
    - name: Code Formatting
      run: black .
  security:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]

    defaults:
      run:
        working-directory: ./example-app
    concurrency:
      group: conc3
    steps:
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        pip install safety
    - name: Security Check
      run: |
          safety check || true
  unittests:
    needs: [security, lint, formatter]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]

    defaults:
      run:
        working-directory: ./example-app
    steps:
    - name: Cache build venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: /home/runner/work/<path>/example-app/.venv
        key: ${{ runner.os }}-venv
    - uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        pip install pytest
    - name: Unit Tests check
      run: |
          pytest
